%targets cpp
%target.cpp.generate_debug_spew_code
%target.cpp.generate_interactive_scanner
%target.cpp.header_filename "SteelScanner.h"
%target.cpp.implementation_filename "SteelScanner.cpp"
%target.cpp.top_of_header_file %{

#include <cassert>
#ifndef _STEEL_SCANNER_H
#define _STEEL_SCANNER_H

#include "SteelParser.h"

class AstBase;
%}

%target.cpp.bottom_of_header_file %{
#endif // _STEEL_SCANNER_H
%}

%target.cpp.top_of_implementation_file %{
#include <iostream>
#include <sstream>
#include <cassert>
#include "SteelScanner.h"
#include "Ast.h"
%}


%target.cpp.top_of_class {
	void setBuffer(const char * pBuffer, const std::string &name);
	int getCurrentLine() const { return m_line; }
	std::string getScriptName() const { return m_script_name; }
}

%target.cpp.bottom_of_class {

	// Converters
	int ToInt(const std::string &text);
	double ToFloat(const std::string &text);
	int ToIntFromHex(const std::string &text);

	unsigned int m_char_cursor;
	const char * m_pBuffer;
	unsigned int m_line;
	AstBase * m_token;
	std::string m_script_name;
}

%target.cpp.bottom_of_implementation_file %{
void SteelScanner::setBuffer(const char * pBuffer, const std::string &name)
{
	assert ( NULL != pBuffer );
	m_char_cursor = 0;
	m_line = 1;
	m_pBuffer = pBuffer;
	m_script_name = name;
}
int SteelScanner::ToInt(const std::string &text)
{
	std::istringstream str(text);
	int i;
	str >> i;

	return i;
}

double SteelScanner::ToFloat(const std::string &text)
{
	std::istringstream str(text);
	double d;
	str >> d;

	return d;
}

int SteelScanner::ToIntFromHex(const std::string &text)
{
	std::istringstream str(text);
	int i;

	str >> std::hex >> i;
	return i;
}

%}

%target.cpp.constructor_actions {
	m_char_cursor = 0;
	m_line = 1;
	m_script_name = "UNKNOWN SCRIPT";	
	m_pBuffer = "";
	m_token = NULL;
}

%target.cpp.reset_for_new_input_actions {
	m_line = 0;	
}

%target.cpp.rejection_actions {
	//std::cerr << "Warning: unmatched input found:" 
	//<< '\'' << accepted_string << '\'' << std::endl;
}

%target.cpp.return_type "SteelParser::Token"




%target.cpp.return_next_input_char {

	if( m_pBuffer[m_char_cursor] == '\0')
		return '\n';
	else
		return m_pBuffer[m_char_cursor++];

}

%target.cpp.return_true_iff_input_is_at_end {

	return (m_pBuffer[m_char_cursor] == '\0');
}


%target.cpp.class_name SteelScanner

%start_with_state_machine MAIN
%%


%state_machine MAIN
:
	(\z)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::END_,NULL);
	}
|
	(/[*])
	%target.cpp {
		    SwitchToStateMachine(StateMachine::COMMENT_GUTS);
	}
|
	(\n)
	%target.cpp {
		m_line++;
	}
|
	(//.*)
	%target.cpp {
		// Eat the comment
	}
|
	([\t ]+)
	 %target.cpp {
		// Eat it
	 }
|
	(")
	%target.cpp {
		m_token = new AstString(m_line,m_script_name);
		
		SwitchToStateMachine(StateMachine::STRING_LITERAL_GUTS);
	}
|
	(true)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::BOOLEAN, new AstBoolean(m_line,m_script_name,true)) ;
	}
|
	(false)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::BOOLEAN, new AstBoolean(m_line,m_script_name,false));
	}
|
	(pop)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::POP,NULL);
	}
|
	(using)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::IMPORT,NULL);
	}
|
	(case)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::CASE,NULL);
	}
|
	(switch)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::SWITCH,NULL);
	}
|
	(default)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::DEFAULT,NULL);
	}
|
	(::)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::SCOPE,NULL);
	}
|
	(:)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::CAT,NULL);
	}
|
	(\-\-)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::DECREMENT,NULL);
	}
|
	(\+\+)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::INCREMENT,NULL);
	}
|
	(0|[1-9][0-9]*)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::INT,new AstInteger(m_line,m_script_name,ToInt(accepted_string)));
	}
|
	(0x[0-9a-fA-F]+)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::INT,new AstInteger(m_line,m_script_name,ToIntFromHex(accepted_string)));
	}
|
	([0-9]+\.[0-9]+)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::FLOAT, new AstFloat(m_line,m_script_name,ToFloat(accepted_string)));
	}	
|
	(\$[a-zA-Z_][a-zA-Z0-9_]*)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::VAR_IDENTIFIER,new AstVarIdentifier(m_line,m_script_name,accepted_string));		
	}
|
	(@[a-zA-Z_][a-zA-Z0-9_]*)
	%target.cpp {
		return SteelParser::Token(SteelParser::Terminal::ARRAY_IDENTIFIER, new AstArrayIdentifier(m_line,m_script_name,accepted_string));
	}
|
	(;|\{|\})
	%target.cpp {
		return SteelParser::Token((SteelParser::Terminal::Name)accepted_string[0],NULL);
	}
|
	(@|\$|\(|\)|,|%|\+|\-|\^|\*|\=|\[|\]|/)
	%target.cpp{
		return SteelParser::Token((SteelParser::Terminal::Name)accepted_string[0],NULL);
	}
|
	(<=)
	 %target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::LTE,NULL);
	}
|
	(>=) 
	%target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::GTE,NULL);
	}
|
	(!=)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::NE,NULL);
	}
|
	(==) 
	%target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::EQ,NULL);
	 }
|
	(<) 
	%target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::LT,NULL);
	}
|
	(>)
	 %target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::GT,NULL);
	}
|
	(d)
	 %target.cpp{ 
		 return SteelParser::Token(SteelParser::Terminal::D,NULL);
	 }
|
	(and) 
	%target.cpp{ 
		 return SteelParser::Token(SteelParser::Terminal::AND,NULL);
	 }
|
	(or) 
	%target.cpp{ 
		 return SteelParser::Token(SteelParser::Terminal::OR,NULL);
	 }
|
	(not|!)
	 %target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::NOT,NULL);
	}
|
	(while)
	 %target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::WHILE,NULL);
	}
|
	(do)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::DO,NULL);
	}
|
	(for) 
	%target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::FOR,NULL);
	}
|
	(break) 
	%target.cpp{ 
		 return SteelParser::Token(SteelParser::Terminal::BREAK,NULL);
	}
|
	(continue)
	 %target.cpp{ 
		 return SteelParser::Token(SteelParser::Terminal::CONTINUE,NULL);
	}
|
	(if) 
	%target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::IF,NULL);
	}
|
	(else)
	 %target.cpp{
		 return SteelParser::Token(SteelParser::Terminal::ELSE,NULL);
	}
|
	(return) 
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::RETURN,NULL);
	}
|
	(function) 
	%target.cpp{ 
		return SteelParser::Token(SteelParser::Terminal::FUNCTION,NULL);
	}
|
	(final)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::FINAL,NULL);
	}
|
	(var|declare)
	 %target.cpp{
		return SteelParser::Token(SteelParser::Terminal::VAR,NULL);
	}
|
	(const)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::CONSTANT,NULL);
	}
|
	([a-zA-Z_][a-zA-Z0-9_]*)
	%target.cpp{
		return SteelParser::Token(SteelParser::Terminal::BAREWORD,new AstFuncIdentifier(m_line,m_script_name,accepted_string));
	}

;

%state_machine COMMENT_GUTS %ungreedy
:
	((\n|.)*[*]/)
	%target.cpp{
		SwitchToStateMachine(StateMachine::MAIN);
	}
|
	((\n|.)*\z)
	%target.cpp{
		// Eat
	}
;

%state_machine STRING_LITERAL_GUTS
:

	([^"])
	%target.cpp{
		// First, add the accepted_string to the string..
		AstString *pString = (AstString*)m_token;		
		pString->addChar(accepted_string[0]);
	}
|
	(\\.)
	%target.cpp{
		AstString *pString = (AstString*)m_token;
		pString->addChar( AstString::getEscapedChar ( accepted_string[1] ) );
	}

|

	(") 
	%target.cpp{ 
		AstString *pString = (AstString*)m_token;

		SwitchToStateMachine(StateMachine::MAIN);
		return SteelParser::Token(SteelParser::Terminal::STRING,m_token);
	}
|
	(\z)
	%target.cpp{
		// Error
	}

;

