%parser_class_name "SteelParser"
%parser_base_assigned_type "AstBase*"
%parser_class_methods_and_members{
    void setBuffer(const char *pBuffer, const std::string &script_name);
	bool hadError() const { return mbErrorEncountered; }
	std::string getErrors() const { return mErrors; }
    Token::Type Scan ();
private:
	void addError(unsigned int line, const std::string &error);
    SteelScanner *m_scanner;
    const char *m_pBuffer;
	bool mbErrorEncountered;
	std::string mErrors;	 
}
%parser_header_file_top { 
	#ifndef STEEL_PARSER_H
	#define STEEL_PARSER_H

	#include <cassert> 
	#include <string>
	#include "Ast.h"
	class SteelScanner;
}
%parser_header_file_bottom {
	#endif // STEEL_PARSER_H
}

%parser_implementation_file_top {
	#include "SteelScanner.h"
	#include "Ast.h"
	#include <sstream>

	std::string itos(int i)	// convert int to string
	{
		std::stringstream s;
		s << i;
		return s.str();
	}
#define GET_LINE() m_scanner->getCurrentLine()
#define GET_SCRIPT() m_scanner->getScriptName()
}

%parser_start_of_parse_method_actions {
	mbErrorEncountered = false;
	mErrors.clear();
}

%parser_implementation_file_bottom {

void SteelParser::addError(unsigned int line, const std::string &error)
{
	mbErrorEncountered = true;
	std::string error_text = GET_SCRIPT() + ':' + itos(line) + ": " + error + '\n';
	mErrors =  mErrors + error_text;
}

void SteelParser::setBuffer(const char * pBuffer, const std::string &name)
{	
	assert( NULL != m_scanner );
	m_scanner->setBuffer(pBuffer,name);
}


SteelParser::Token::Type SteelParser::Scan ()
{
	assert(m_scanner != NULL);
	return m_scanner->Scan(&m_lookahead_token);
}
}
%parser_constructor_actions{
    m_scanner = new SteelScanner();
}

%parser_destructor_actions{
    delete m_scanner;
}


%parser_throw_away_token_actions{
    delete token;
}



%token ';' '(' ')' '=' '{' '}' '[' ']' ','
%token '-' '+' '*' '/' '^' '%'
%token D
%token GT LT EQ NE GTE LTE
%token AND OR NOT
%token WHILE
%token BREAK
%token CONTINUE
%token RETURN
%token IF
%token ELSE
%token FUNCTION
%token FUNC_IDENTIFIER
%token VAR_IDENTIFIER
%token ARRAY_IDENTIFIER
%token FOR
%token VAR
%token INT
%token FLOAT
%token STRING
%token INCREMENT
%token DECREMENT
%token CAT
%token POP
%token FINAL
%token CONST

%prec CORRECT
%prec NON_ELSE_INCORRECT
%prec ELSE_INCORRECT
%prec ASSIGNMENT
%prec NON_ELSE
%prec ELSE
%prec OR
%prec AND
%prec EQ_NE
%prec COMPARATOR
%prec ADD_SUB
%prec MULT_DIV_MOD
%prec UNARY
%prec POW
%prec PAREN


%start root
%%

root %type "AstScript*"
:
	statement_list:list 
			{
				AstScript * pScript =   new AstScript(
							list->GetLine(),
							list->GetScript());
		        pScript->SetList(list);
				return pScript;
			} 

;

func_definition %type "AstFunctionDefinition*"
:
	FUNCTION FUNC_IDENTIFIER:id '(' param_definition:params ')' '{' statement_list:stmts '}'
				{
					return new AstFunctionDefinition(id->GetLine(),
									id->GetScript(),
									static_cast<AstFuncIdentifier*>(id),
									params,
									stmts,
									false);
				}
|
	FUNCTION FUNC_IDENTIFIER:id '(' %error ')' '{' statement_list:stmts '}'
				{
					AstFuncIdentifier *pId = static_cast<AstFuncIdentifier*>(id);
					addError(id->GetLine(),"parser error in parameter list for function '" + pId->getValue() + '\'');
					return new AstFunctionDefinition(id->GetLine(),
									id->GetScript(),
									pId,
									NULL,
									stmts,
									false);
				}
|
	FINAL FUNCTION FUNC_IDENTIFIER:id '(' %error ')' '{' statement_list:stmts '}'
				{
					AstFuncIdentifier *pId = static_cast<AstFuncIdentifier*>(id);
					addError(id->GetLine(),"parser error in parameter list for function '" + pId->getValue() + '\'');
					return new AstFunctionDefinition(id->GetLine(),
									id->GetScript(),
									pId,
									NULL,
									stmts,
									true);
				}
|
	FUNCTION %error '(' param_definition:params  ')' '{' statement_list:stmts '}'
				{
					addError(GET_LINE(),"parser error after 'function' keyword.");
					return new AstFunctionDefinition(GET_LINE(),
									GET_SCRIPT(),
									new AstFuncIdentifier(GET_LINE(),
										GET_SCRIPT(),
										"__%%error%%__"),
									params,
									stmts,
									false);
				}
|
	FINAL FUNCTION %error '(' param_definition:params ')' '{' statement_list:stmts '}'
				{
					addError(GET_LINE(),"parser error after 'function' keyword.");
					return new AstFunctionDefinition(GET_LINE(),
									GET_SCRIPT(),
									new AstFuncIdentifier(GET_LINE(),
										GET_SCRIPT(),
										"__%%error%%__"),
									params,
									stmts,
									true);
				}

|
	FINAL FUNCTION FUNC_IDENTIFIER:id '(' param_definition:params ')' '{' statement_list:stmts '}'
				{
					return new AstFunctionDefinition(id->GetLine(),
									id->GetScript(),
									static_cast<AstFuncIdentifier*>(id),
									params,
									stmts,
									true);
				}
;



param_id %type "AstIdentifier*"
:
	VAR_IDENTIFIER:id { return id; }
|
	ARRAY_IDENTIFIER:id { return id; }
;

param_definition %type "AstParamDefinitionList*"
:
	{
		 return new AstParamDefinitionList(GET_LINE(), GET_SCRIPT());
	}
|
	vardecl:decl 
			{
				AstParamDefinitionList * pList = new AstParamDefinitionList(decl->GetLine(),decl->GetScript());
				pList->add(static_cast<AstDeclaration*>(decl));
				return pList;		
			}
|
	param_definition:list ',' vardecl:decl
			{
				list->add(static_cast<AstDeclaration*>(decl));
				return list;
			}
|
	param_definition:list %error
			{
				addError(list->GetLine(),"expected parameter definition");
				return list;
			}

;

statement_list %type "AstStatementList*"
:
			{
				AstStatementList *pList = 
					new AstStatementList(m_scanner->getCurrentLine(),
										m_scanner->getScriptName());
				return pList;
			}
|
	statement_list:list statement:stmt
				{
					list->add( stmt ); 
					return list;
				}
;

statement %type "AstStatement*"
:
	%error { 
			addError(GET_LINE(),"parse error");
			return new AstStatement(GET_LINE(),GET_SCRIPT());
		}
|
	exp_statement:exp  { return new AstExpressionStatement(exp->GetLine(),exp->GetScript(), exp); }
|
	func_definition:func { return func; }
|
	'{' statement_list:list '}' %prec CORRECT { return list; }
|
	'{' '}' {
			 return new AstStatement(GET_LINE(),GET_SCRIPT());
			}
|
	vardecl:vardecl ';' { return vardecl; }
|
	%error vardecl:decl 
			{
				addError(decl->GetLine(),"unexpected tokens found before variable declaration.");
				return decl;
			}
|
	vardecl:decl %error ';'
		{
			addError(decl->GetLine(),"expected ';' after variable declaration.");
			return decl;
		}
|
	WHILE '(' exp:exp ')' statement:stmt %prec CORRECT { return new AstWhileStatement(exp->GetLine(), exp->GetScript(),exp,stmt); }
|
	WHILE '('   
			{ 
				addError(GET_LINE(),"expected ')'");
				return new AstWhileStatement(GET_LINE(), GET_SCRIPT(),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT())); 
			}
|
	WHILE %error  
			{ 
				addError(GET_LINE(),"missing loop condition.");
				return new AstWhileStatement(GET_LINE(), GET_SCRIPT(),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT())); 
			}
|

	WHILE '(' %error ')' statement:stmt
			{ 
				addError(GET_LINE(),"error in loop expression.");
				return new AstWhileStatement(GET_LINE(), GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),stmt);    
			}
|
	IF '(' exp:exp ')' statement:stmt ELSE statement:elses %prec ELSE { return new AstIfStatement(exp->GetLine(), exp->GetScript(),exp,stmt,elses);}
|
	IF '(' exp:exp ')' statement:stmt %prec NON_ELSE { return new AstIfStatement(exp->GetLine(),exp->GetScript(),exp,stmt); }
|
	IF '(' %error ')' statement:stmt ELSE statement:elses %prec ELSE 
		{
			addError(GET_LINE(),"parse error in if condition."); 
			return new AstIfStatement(GET_LINE(), GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),stmt,elses);
		}
|
	IF '(' %error ')' statement:stmt %prec NON_ELSE 
			{
				addError(GET_LINE(),"parse error in if condition."); 
				return new AstIfStatement(GET_LINE(), GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),stmt);
			}
|
	IF '(' %error 
		{
			addError(GET_LINE(),"expected ')' after if condition.");
			return new AstIfStatement(GET_LINE(),GET_SCRIPT(),
				new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT()));
		}
|
	IF %error
		{
			addError(GET_LINE(),"expected opening '(' after 'if'");
			return new AstIfStatement(GET_LINE(),GET_SCRIPT(),
				new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT()));

		}
|

	RETURN exp:exp ';' %prec CORRECT { return new AstReturnStatement(exp->GetLine(),exp->GetScript(),exp);}
|
	RETURN ';' %prec CORRECT
			{
				return new AstReturnStatement(GET_LINE(),GET_SCRIPT());
			}
|
	RETURN %error
			{
				addError(GET_LINE(),"expected ';' after 'return'");
				return new AstReturnStatement(GET_LINE(),GET_SCRIPT()); 
			}
|
	RETURN 
			{
				addError(GET_LINE(),"expected ';' after 'return'");
				return new AstReturnStatement(GET_LINE(),GET_SCRIPT()); 
			}

|
	FOR '(' exp_statement:start exp_statement:condition ')' statement:stmt %prec CORRECT
			{
				return new AstLoopStatement(start->GetLine(),start->GetScript(),start,condition, 
						new AstExpression (start->GetLine(),start->GetScript()), stmt); 
			}
|
	FOR '(' exp_statement:start exp_statement:condition  exp:iteration ')' statement:stmt %prec CORRECT
			{
				return new AstLoopStatement(start->GetLine(),start->GetScript(),start,condition,iteration,stmt);
			}
|
	FOR '(' %error 
			{
				addError(GET_LINE(),"malformed for loop.");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	FOR '(' exp_statement:start %error
			{
				addError(GET_LINE(),"malformed for loop.");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	FOR '(' exp_statement:start exp_statement:condition %error
			{
				addError(GET_LINE(),"malformed for loop.");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	FOR '(' exp_statement:start exp_statement:condition exp:iteration
			{
				addError(GET_LINE(),"malformed for loop. Expected ')'");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	FOR %error
			{
				addError(GET_LINE(),"malformed for loop. Expected opening '('");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}

|
	BREAK ';' %prec CORRECT
			{
				return new AstBreakStatement(GET_LINE(),GET_SCRIPT()); 
			}
|
	BREAK %error
			{
				addError(GET_LINE(),"expected ';' after 'break'");
				return new AstBreakStatement(GET_LINE(),GET_SCRIPT()); 
			}
|
	BREAK 
			{
				addError(GET_LINE(),"expected ';' after 'break'");
				return new AstBreakStatement(GET_LINE(),GET_SCRIPT()); 
			}


|
	CONTINUE ';' %prec CORRECT
			{
				return new AstContinueStatement(GET_LINE(),GET_SCRIPT()); 
			}
|
	CONTINUE %error
			{
				addError(GET_LINE(),"expected ';' after 'continue'");
				return new AstContinueStatement(GET_LINE(),GET_SCRIPT()); 
			}
|
	CONTINUE 
			{
				addError(GET_LINE(),"expected ';' after 'continue'");
				return new AstContinueStatement(GET_LINE(),GET_SCRIPT()); 
			}


;


exp %type "AstExpression*"
:
	call:call { return call; }
|
	INT:i { return i;}
|	
	FLOAT:f { return f; }
|
	STRING:s { return s; }
|
	var_identifier:id { return id; }
|
	array_identifier:id { return id; }
|
	exp:a '+' exp:b %prec ADD_SUB { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::ADD,a,b); }
|
	exp:a '+'  %prec ADD_SUB{ 
				addError(a->GetLine(),"expected expression before '+'.");	
				return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::ADD,a,new AstExpression(GET_LINE(),GET_SCRIPT()));
			  }
|
	exp:a '-'  %prec ADD_SUB{ 
				addError(a->GetLine(),"expected expression before '-'.");	
				return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::SUB,a,new AstExpression(GET_LINE(),GET_SCRIPT()));
			  }
|
	exp:a '*'  %prec MULT_DIV_MOD{ 
				addError(a->GetLine(),"expected expression after '*'.");	
				return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::MULT,a,new AstExpression(GET_LINE(),GET_SCRIPT()));
			  }
|
	'*' exp:b  %prec MULT_DIV_MOD{ 
				addError(b->GetLine(),"expected expression before '*'.");	
				return new AstBinOp(b->GetLine(),b->GetScript(),AstBinOp::MULT,new AstExpression(GET_LINE(),GET_SCRIPT()),b);
			  }

|
	exp:a '-' exp:b %prec ADD_SUB { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::SUB,a,b); }
|
	exp:a '*' exp:b %prec MULT_DIV_MOD { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::MULT,a,b); }
|
	exp:a '/' exp:b %prec MULT_DIV_MOD { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::DIV,a,b); }
|
	exp:a '%' exp:b %prec MULT_DIV_MOD { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::MOD,a,b); }
|
	exp:a D exp:b %prec POW { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::D,a,b); }
|
	exp:lvalue '=' exp:exp  %right %prec ASSIGNMENT { return new AstVarAssignmentExpression(lvalue->GetLine(),lvalue->GetScript(),lvalue,exp); }
|
	exp:a '^' exp:b %right %prec POW { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::POW,a,b); }
|
	exp:a OR exp:b %prec OR { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::OR,a,b); }
|
	exp:a AND exp:b %prec AND { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::AND,a,b); }
|
	exp:a EQ exp:b %prec EQ_NE { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::EQ,a,b); }
|
	exp:a NE exp:b %prec EQ_NE { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::NE,a,b); }
|
	exp:a LT exp:b %prec COMPARATOR { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::LT,a,b); }
|
	exp:a GT exp:b %prec COMPARATOR { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::GT,a,b); }
|
	exp:a LTE exp:b %prec COMPARATOR { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::LTE,a,b); }
|
	exp:a GTE exp:b %prec COMPARATOR { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::GTE,a,b); }	
|
	exp:a CAT exp:b %prec ADD_SUB { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::CAT,a,b); }
|
	'(' exp:exp ')' %prec PAREN { return exp; }
|
	'-' exp:exp %right %prec UNARY { return new AstUnaryOp(exp->GetLine(), exp->GetScript(), AstUnaryOp::MINUS,exp); }
|
	'+' exp:exp %right %prec UNARY { return new AstUnaryOp(exp->GetLine(), exp->GetScript(), AstUnaryOp::PLUS,exp); }
|
	NOT %error %right %prec UNARY {
						addError(GET_LINE(),"expected expression after unary minus.");
						return new AstUnaryOp(GET_LINE(),GET_SCRIPT(),AstUnaryOp::NOT,new AstExpression(GET_LINE(),GET_SCRIPT()));
								  }


|

	CAT %error %right %prec UNARY {
						addError(GET_LINE(),"expected expression after ':'.");
						return new AstUnaryOp(GET_LINE(),GET_SCRIPT(),AstUnaryOp::CAT,new AstExpression(GET_LINE(),GET_SCRIPT()));
								  }
|

	NOT exp:exp %right %prec UNARY { return new AstUnaryOp(exp->GetLine(), exp->GetScript(), AstUnaryOp::NOT,exp); }
|
	CAT exp:exp %right %prec UNARY { return new AstUnaryOp(exp->GetLine(),
exp->GetScript(), AstUnaryOp::CAT,exp); }
|
	exp:lvalue '[' exp:index ']' %prec PAREN { return new AstArrayElement(lvalue->GetLine(),lvalue->GetScript(),lvalue,index); }
|
	INCREMENT exp:lvalue %right %prec UNARY { return new AstIncrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstIncrement::PRE);}
|
	INCREMENT %error %right %prec UNARY{
										addError(GET_LINE(),"expected lvalue after '++'");
										return new AstIncrement(GET_LINE(),GET_SCRIPT(),
												new AstExpression(GET_LINE(),GET_SCRIPT()),AstIncrement::PRE);
										}
|
	%error INCREMENT %prec PAREN { 
									addError(GET_LINE(),"expected lvalue before '++'");
									return new AstIncrement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()), AstIncrement::POST);
	   							}

|
	exp:lvalue INCREMENT %prec PAREN { return new AstIncrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstIncrement::POST);}
|
	DECREMENT exp:lvalue %right %prec UNARY { return new AstDecrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstDecrement::PRE);}
|
	DECREMENT %error %right %prec UNARY{
										addError(GET_LINE(),"expected lvalue after '--'");
										return new AstDecrement(GET_LINE(),GET_SCRIPT(),
												new AstExpression(GET_LINE(),GET_SCRIPT()),AstDecrement::PRE);
										}

|
	exp:lvalue DECREMENT %prec PAREN { 
									return new AstDecrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstDecrement::POST);
									}
|
	%error DECREMENT %prec PAREN { 
									addError(GET_LINE(),"expected lvalue before '--'");
									return new AstDecrement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()), AstDecrement::POST);
									}

|
	POP exp:lvalue %prec UNARY { return new AstPop(lvalue->GetLine(),lvalue->GetScript(),lvalue); }
|
	POP %error %right %prec UNARY {
						addError(GET_LINE(),"expected expression after 'pop'.");
						return new AstPop(GET_LINE(),GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()));
							  }

;

exp_statement %type "AstExpression*"
:
	';' {
			return new AstExpression(GET_LINE(),GET_SCRIPT()); 
		}
|
	exp:exp ';' { return exp; }
;

int_literal %type "AstInteger*"
:
	INT:i { return i; }
;

var_identifier %type "AstVarIdentifier *"
:
	VAR_IDENTIFIER:id { return id; }
;

func_identifier %type "AstFuncIdentifier*"
:
	FUNC_IDENTIFIER:id { return id; }
;

array_identifier %type "AstArrayIdentifier*"
:
	ARRAY_IDENTIFIER:id { return id; }
;


call %type "AstCallExpression*"
:
	func_identifier:id '(' ')' %prec CORRECT { return new AstCallExpression(id->GetLine(),id->GetScript(),id);}
|
	func_identifier:id '(' param_list:params ')' %prec CORRECT { return new AstCallExpression(id->GetLine(),id->GetScript(),id,params);}
|
	func_identifier:id '(' param_list:params 
			{
				addError(GET_LINE(),"expected ')' before ';'.");
				return new AstCallExpression(id->GetLine(),id->GetScript(),id,params); 
			}
|
	func_identifier:id '('
			{
				addError(GET_LINE(),"expected ')' before ';'");
				return new AstCallExpression(id->GetLine(),id->GetScript(),id); 
			}
|
	func_identifier:id %error ')'
			{
				addError(GET_LINE(),"missing '(' in function call");
				return new AstCallExpression(id->GetLine(),id->GetScript(),id); 
			}
|
	func_identifier:id %error
			{
				addError(GET_LINE(),"function call missing parentheses.");
				return new AstCallExpression(id->GetLine(),id->GetScript(),id); 
			}
|
	func_identifier:id
			{
				addError(GET_LINE(),"invalid bareword. function call missing parentheses?");
				return new AstCallExpression(id->GetLine(),id->GetScript(),id); 
			}

;

vardecl %type "AstDeclaration*"
:
	VAR var_identifier:id { return new AstVarDeclaration(id->GetLine(),id->GetScript(),id);}
|
	VAR var_identifier:id '=' exp:exp { return new AstVarDeclaration(id->GetLine(),id->GetScript(),id,exp); }
|
	CONST var_identifier:id '=' exp:exp { return new AstVarDeclaration(id->GetLine(),id->GetScript(),id,true,exp); }
|
	VAR array_identifier:id '[' exp:i ']' { return new AstArrayDeclaration(id->GetLine(),id->GetScript(),id,i); }
|
	VAR array_identifier:id { return new AstArrayDeclaration(id->GetLine(),id->GetScript(),id); }
|
	VAR array_identifier:id '=' exp:exp      {
							AstArrayDeclaration *pDecl =  new AstArrayDeclaration(id->GetLine(),id->GetScript(),id);
							pDecl->assign(exp);
							return pDecl;
						 }
;

param_list %type "AstParamList*"
:
	exp:exp { AstParamList * pList = new AstParamList ( exp->GetLine(), exp->GetScript() );
		  pList->add(exp);
		  return pList;
		}
|
	param_list:list ',' exp:exp { list->add(exp); return list;}
			    
;


