
%targets cpp
%target.cpp.header_filename "SteelParser.h"
%target.cpp.implementation_filename "SteelParser.cpp"
%target.cpp.top_of_header_file %{
#if !defined(STEEL_PARSER_HPP_)
#define STEEL_PARSER_HPP_

	#include <cassert>
	#include <string>
	#include <cstring>
	#include "File.h"
	#include "Ast.h"
	namespace Steel { 
	class SteelScanner;

%}
%target.cpp.class_name SteelParser

%target.cpp.bottom_of_header_file %{
} // namespace Steel
#endif // !defined(STEEL_PARSER_HPP_)
%}
%target.cpp.top_of_implementation_file %{

	#include "SteelScanner.h"
	#include "Ast.h"
	#include <fstream>
	#include <sstream>

	std::string itos(int i)	// convert int to string
	{
		std::stringstream s;
		s << i;
		return s.str();
	}
#define GET_LINE() m_scanner->getCurrentLine()
#define GET_SCRIPT() m_scanner->getScriptName()
	namespace Steel { 
%}

%target.cpp.bottom_of_class {
  	void setBuffer(const char *pBuffer, const std::string &script_name);
	void setFileProvider(IFileProvider* provider);
	void append(const std::string& str);
	bool hadError() const { return mbErrorEncountered; }
	std::string getErrors() const { return mErrors; }
    	Token Scan ();
    	void SetScannerDebugSpew(bool on);
private:
	void addError(unsigned int line, const std::string &error);
	SteelScanner *m_scanner;
    	const char *m_pBuffer;
	bool mbErrorEncountered;
	FileProvider m_default_file_provider;
	IFileProvider* m_file_provider;
	std::string mErrors;
}

%target.cpp.top_of_parse_method_actions %{
	mbErrorEncountered = false;
	mErrors.clear();
%}

%target.cpp.bottom_of_implementation_file %{

void SteelParser::addError(unsigned int line, const std::string &error)
{
	mbErrorEncountered = true;
	std::string error_text = GET_SCRIPT() + ':' + itos(line) + ": " + error + '\n';
	mErrors =  mErrors + error_text;
}

void SteelParser::setBuffer(const char * pBuffer, const std::string &name)
{
	assert( NULL != m_scanner );
	m_scanner->setBuffer(pBuffer,name);
}

void SteelParser::setFileProvider(IFileProvider* provider)
{
	m_file_provider = provider;
}

void SteelParser::append(const std::string& str)
{
	m_scanner->append(str);
}

void SteelParser::SetScannerDebugSpew(bool on)
{
	assert ( NULL != m_scanner );
	m_scanner->DebugSpew(on);
}

SteelParser::Token SteelParser::Scan ()
{
	assert(m_scanner != NULL);
	return m_scanner->Scan();
}

} // namespace Steel
%}


%target.cpp.constructor_actions{
    m_scanner = new SteelScanner();
	m_file_provider = &m_default_file_provider;
}

%target.cpp.destructor_actions{
    delete m_scanner;
}


%target.cpp.throw_away_token_actions{
    delete token_data;
}

%target.cpp.token_data_type "AstBase*"


%target.cpp.token_data_default "NULL"
%target.cpp.scan_actions {
    assert(m_scanner != NULL);
    return m_scanner->Scan();
}


%target.cpp.generate_debug_spew_code
%target.cpp.dont_generate_timestamps



%terminal ':'
%terminal ';' '(' ')' '{' '}' '[' ']' ','
%terminal '-' '+' '^' '='
%terminal D
%terminal BINOP_COMPARE %type.cpp "AstBinOp*"
%terminal AND OR NOT
%terminal WHILE
%terminal BREAK
%terminal CONTINUE
%terminal RETURN
%terminal IF
%terminal ELSE
%terminal FUNCTION
%terminal IDENTIFIER %type.cpp "AstIdentifier*"
%terminal FOR
%terminal FOREACH
%terminal WITHIN
%terminal INCLUDE
%terminal VAR
%terminal STRING %type.cpp "AstString*"
%terminal BINOP_MULT_DIV_MOD %type.cpp "AstBinOp*"
%terminal BINOP_ASSIGNMENT %type.cpp "AstBinOp*"
%terminal LITERAL %type.cpp "AstExpression*"
%terminal INCREMENT
%terminal DECREMENT
%terminal POP
%terminal POPB
%terminal PUSH
%terminal PUSHB
%terminal REMOVE
%terminal CONSTANT
%terminal DO
%terminal IMPORT
%terminal SCOPE
%terminal SWITCH
%terminal CASE
%terminal DEFAULT
%terminal CASE_DELIM
%terminal LAMBDA
%terminal MAKE_PAIR
%terminal BIN_AND
%terminal BIN_OR
%terminal BIN_NOT



%prec.left CORRECT
%prec.left NON_ELSE_INCORRECT
%prec.left ELSE_INCORRECT
%prec.right ASSIGNMENT
%prec.left NON_ELSE
%prec.left ELSE
%prec.left OR
%prec.left AND
%prec.left BIN_OR
%prec.left BIN_AND
%prec.left EQ_NE
%prec.left COMPARATOR
%prec.left ADD_SUB
%prec.left MULT_DIV_MOD
%prec.left POW
%prec.right UNARY
%prec.left CALL
%prec.left INC_DEC
%prec.left MEMBER



%default_parse_nonterminal root
%%

%nonterminal root %type.cpp "AstScript*"
:
	statement_list:list %end
			%target.cpp{
				AstScript * pScript =   new AstScript(
							list->GetLine(),
							list->GetScript());
		        pScript->SetList(list);
				return pScript;
			}
;

%nonterminal func_definition %type.cpp "AstFunctionDefinition*"
:
	FUNCTION IDENTIFIER:id '(' param_definition:params ')' '{' statement_list:stmts '}'
				%target.cpp{
					return new AstFunctionDefinition(id->GetLine(),
									id->GetScript(),
									id,
									params,
									stmts);
				}
|
        FUNCTION IDENTIFIER:ns SCOPE IDENTIFIER:id '(' param_definition:params ')' '{' statement_list:stmts '}'
                 %target.cpp {
                                  AstFuncIdentifier * func_id =  new AstFuncIdentifier(ns->GetLine(),ns->GetScript(),ns->getValue(),id->getValue());   
					return new AstFunctionDefinition(ns->GetLine(),
									ns->GetScript(),
									func_id,
									params,
									stmts);
                 }
|
	FUNCTION IDENTIFIER:id '(' %error ')' '{' statement_list:stmts '}'
				%target.cpp{
					//AstFuncIdentifier *pId = static_cast<AstFuncIdentifier*>(id);
					addError(id->GetLine(),"parser error in parameter list for function '" + id->getValue() + '\'');
					return new AstFunctionDefinition(id->GetLine(),
									id->GetScript(),
									id,
									NULL,
									stmts);
				}
|
	FUNCTION '(' param_definition:params  ')' '{' %error
				%target.cpp{
					addError(GET_LINE(),"parser error after 'function' keyword.");
					return new AstFunctionDefinition(GET_LINE(),
									GET_SCRIPT(),
                                                                        new AstIdentifier(GET_LINE(),GET_SCRIPT(), ""),
									params,
									new AstStatementList(GET_LINE(),GET_SCRIPT()));
				}
|
	FUNCTION IDENTIFIER:id '(' param_definition:params ')' '{' statement_list:stmts %error
		 		    %target.cpp {
				    	addError(GET_LINE(),"parse error in function definition. expected '}'");
					return new AstFunctionDefinition(GET_LINE(),
									GET_SCRIPT(),
                                                                        id,
									params,
									stmts);
				    }

;




%nonterminal param_definition %type.cpp "AstParamDefinitionList*"
:
	%target.cpp{
		 return new AstParamDefinitionList(GET_LINE(), GET_SCRIPT());
	}
|
	vardecl:decl
			%target.cpp{
				AstParamDefinitionList * pList = new AstParamDefinitionList(decl->GetLine(),decl->GetScript());
				pList->add(static_cast<AstDeclaration*>(decl));
				return pList;
			}
|
	param_definition:list ',' vardecl:decl
			%target.cpp{
				list->add(static_cast<AstDeclaration*>(decl));
				return list;
			}
|
	param_definition:list %error
			%target.cpp{
				addError(list->GetLine(),"expected parameter definition");
				return list;
			}

;

%nonterminal statement_list %type.cpp "AstStatementList*"
:
			%target.cpp{
				AstStatementList *pList =
					new AstStatementList(m_scanner->getCurrentLine(),
										m_scanner->getScriptName());
				return pList;
			}
|
	statement_list:list statement:stmt
				%target.cpp{
					list->add( stmt );
					return list;
				}
;

%nonterminal array_literal %type.cpp "AstArrayLiteral*"
:
        %target.cpp {
                    AstArrayLiteral * array = new AstArrayLiteral(GET_LINE(),GET_SCRIPT());
                    return array;
                    }
|
	exp:exp
		%target.cpp {
			    AstArrayLiteral * array = new AstArrayLiteral(exp->GetLine(),exp->GetScript());
			    array->add(exp);
			    return array;
		}
|
	array_literal:array ',' exp:exp
			    %target.cpp {
			    	array->add ( exp );
				return array; 
			    }
;
%nonterminal pair_list %type.cpp "AstPairList*"
:
	pair:pair 
		%target.cpp {
			    AstPairList * pList =  new AstPairList(m_scanner->getCurrentLine(), m_scanner->getScriptName());
			    pList->add(pair);
			    return pList;
		}
|
	pair_list:list ',' pair:pair 
		       %target.cpp {
		            list->add ( pair ) ;
			    return list;
		       }
;

%nonterminal pair %type.cpp "AstPair*"
:
	exp:key MAKE_PAIR exp:value 
		%target.cpp {
			    return new AstPair(key->GetLine(),key->GetScript(),key,value);
		}
;

%nonterminal statement %type.cpp "AstStatement*"
:
	INCLUDE:inc STRING:str ';' %target.cpp {
		    const std::string filename = str->getString();
		    IFile * file = m_file_provider->create();
			if(!file->open(filename.c_str()))
		    {
			addError(GET_LINE(),"couldn't open file: " + filename);
			return new AstStatement(GET_LINE(),GET_SCRIPT());
		    }

		    std::ostringstream strstream;
		    while(!file->eof())
		    {
				char buffer[1024];
				memset(buffer,0,1024);
				int r = file->read(buffer,1024);
				strstream.write(buffer,r);
		    }
			file->close();
			delete file;
			std::ofstream out("include.out");
			out << strstream.str();
			out.close();
		    AstBase * pBase;
		    SteelParser parser;
		    parser.setBuffer(strstream.str().c_str(),filename);

		    if(parser.Parse(&pBase) != SteelParser::PRC_SUCCESS)
    		    {
			if(parser.hadError())
        		{
				addError(GET_LINE(),parser.getErrors());
				return new AstStatement(GET_LINE(),GET_SCRIPT());
        		}
        		else
        		{
				addError(GET_LINE(),"Unknown parse error in " + filename);
				return new AstStatement(GET_LINE(),GET_SCRIPT());
        		}
    		    }
    		    else if (parser.hadError())
    		    {
			addError(GET_LINE(),parser.getErrors());
			return new AstStatement(GET_LINE(),GET_SCRIPT());
    		    }

    		    AstScript * pScript = dynamic_cast<AstScript*> ( pBase );


		    return pScript;
	}
|
	IMPORT:imp  STRING:str  ';' %target.cpp{ return new AstImport(GET_LINE(),GET_SCRIPT(),str); }
|
	';' %target.cpp { return new AstExpressionStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT())); }
|
	%error ';' %target.cpp {
	       	   addError(GET_LINE(),"error before ;");
		   return new AstExpressionStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()));
		   }
|
	exp:exp %error %target.cpp {
		addError(GET_LINE(),"missing semi-colon after expression?");
		return new AstExpressionStatement(exp->GetLine(),exp->GetScript(),exp);
	}
|
	exp:exp ';'  %target.cpp { return new AstExpressionStatement(exp->GetLine(),exp->GetScript(), exp); }
	
|
	'('  %error ')' %target.cpp {
	    addError(GET_LINE(),"expected expression between '(' and ')'");
	    return new AstStatement(GET_LINE(),GET_SCRIPT());
	}

|
	'('  %error %target.cpp {
	    addError(GET_LINE(),"unmatched ')'");
	    return new AstStatement(GET_LINE(),GET_SCRIPT());
	    }

|
	func_definition:func %target.cpp { return func; }
	/*
|
	'}' %error %target.cpp {
	    addError(GET_LINE(),"unmatched '}'");
	    return new AstStatement(GET_LINE(),GET_SCRIPT());
	}
	*/
|
	'{' statement_list:list '}' %prec CORRECT  %target.cpp { return list; }
|
	'{' statement_list:list %error %target.cpp {
	addError(GET_LINE(),"'{' without matching '}'");
	return new AstStatement(GET_LINE(),GET_SCRIPT());
	}
|
	vardecl:vardecl ';' %target.cpp { return vardecl; }
|
	vardecl:decl %error ';'
		%target.cpp{
			addError(decl->GetLine(),"expected ';' after variable declaration.");
			return decl;
		}
|
	WHILE '(' exp:exp ')' statement:stmt %prec CORRECT %target.cpp { return new AstWhileStatement(exp->GetLine(), exp->GetScript(),exp,stmt); }

|
	WHILE '('   %error
			%target.cpp{
				addError(GET_LINE(),"expected ')'");
				return new AstWhileStatement(GET_LINE(), GET_SCRIPT(),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	WHILE %error
			%target.cpp{
				addError(GET_LINE(),"missing loop condition.");
				return new AstWhileStatement(GET_LINE(), GET_SCRIPT(),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
/*
	WHILE '(' %error ')' statement:stmt
			%target.cpp{
				addError(GET_LINE(),"error in loop expression.");
				return new AstWhileStatement(GET_LINE(), GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),stmt);
			}

|*/
	DO statement:stmt WHILE '(' exp:condition ')' %prec CORRECT
	   %target.cpp{
				return new AstDoStatement(GET_LINE(), GET_SCRIPT(), condition, stmt);
	   }
|
/*
	DO statement:stmt WHILE '(' %error ')'
	   %target.cpp{
				addError(GET_LINE(),"error in while condition.");
				return new AstDoStatement(GET_LINE(), GET_SCRIPT(), NULL, stmt);
	   }
|*/
	DO statement:stmt %error
	   %target.cpp{
				addError(GET_LINE(),"error. do loop missing proper while condition.");
				return new AstDoStatement(GET_LINE(), GET_SCRIPT(), NULL, stmt);
	   }

|
	DO statement:stmt WHILE '(' %error
	   %target.cpp{
				addError(GET_LINE(),"error, missing condition or no closing ')' found after while.");
				return new AstDoStatement(GET_LINE(), GET_SCRIPT(), NULL, NULL);
	   }

|

	IF '(' exp:exp ')' statement:stmt ELSE statement:elses %prec ELSE %target.cpp{ return new AstIfStatement(exp->GetLine(), exp->GetScript(),exp,stmt,elses);}
|
	IF '(' exp:exp ')' statement:stmt %prec NON_ELSE %target.cpp { return new AstIfStatement(exp->GetLine(),exp->GetScript(),exp,stmt); }
|
/*
	IF '(' %error ')' statement:stmt ELSE statement:elses %prec ELSE
	%target.cpp{
			addError(GET_LINE(),"parse error in if condition.");
			return new AstIfStatement(GET_LINE(), GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),stmt,elses);
		}
|
	IF '(' %error ')' statement:stmt %prec NON_ELSE
			%target.cpp{
				addError(GET_LINE(),"parse error in if condition.");
				return new AstIfStatement(GET_LINE(), GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),stmt);
			}
|*/
	IF '(' %error
		%target.cpp{
			addError(GET_LINE(),"expected ')' after if condition.");
			return new AstIfStatement(GET_LINE(),GET_SCRIPT(),
				new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT()));
		}
|
	IF %error
		%target.cpp{
			addError(GET_LINE(),"expected opening '(' after 'if'");
			return new AstIfStatement(GET_LINE(),GET_SCRIPT(),
				new AstExpression(GET_LINE(),GET_SCRIPT()), new AstStatement(GET_LINE(),GET_SCRIPT()));

		}
|

	RETURN exp:exp ';' %prec CORRECT %target.cpp{ return new AstReturnStatement(exp->GetLine(),exp->GetScript(),exp);}
|
	RETURN ';' %prec CORRECT
			%target.cpp{
				return new AstReturnStatement(GET_LINE(),GET_SCRIPT());
			}
|
	FOR '(' vardecl:decl ';' optionalexp:condition ';' optionalexp:iteration ')' statement:stmt %prec CORRECT
			%target.cpp{
				return new AstLoopStatement(decl->GetLine(),decl->GetScript(),decl,condition,iteration,stmt);
			}
|
	FOR '(' optionalexp:start ';' optionalexp:condition ';' optionalexp:iteration ')' statement:stmt %prec CORRECT
			%target.cpp{
				return new AstLoopStatement(start->GetLine(),start->GetScript(),start,condition,iteration,stmt);
			}
|
	FOR '(' %error
			%target.cpp{
				addError(GET_LINE(),"malformed for loop.");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|/*
	FOR '(' optionalexp:start %error
			%target.cpp{
				addError(GET_LINE(),"malformed for loop.");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	FOR '(' optionalexp:start ';' exp:condition %error
			%target.cpp{
				addError(GET_LINE(),"malformed for loop.");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	FOR '(' optionalexp:start ';' optionalexp:condition ';' optionalexp:iteration %error
			%target.cpp{
				addError(GET_LINE(),"malformed for loop. Expected ')'");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|*/
	FOR %error
			%target.cpp{
				addError(GET_LINE(),"malformed for loop. Expected opening '('");
				return new AstLoopStatement(GET_LINE(),GET_SCRIPT(), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstExpression(GET_LINE(),GET_SCRIPT()), new AstExpression(GET_LINE(),GET_SCRIPT()),
						new AstStatement(GET_LINE(),GET_SCRIPT()));
			}
|
	FOREACH '(' vardecl:decl ')' WITHIN exp:exp statement:stmt
			     %target.cpp{
				return new AstForEachStatement(GET_LINE(),GET_SCRIPT(), decl, exp, stmt);
			     }
|
	FOREACH IDENTIFIER:id WITHIN exp:exp statement:stmt
			    %target.cpp{
				return new AstForEachStatement(GET_LINE(),GET_SCRIPT(), id, exp, stmt);
			    }

|
	BREAK ';' %prec CORRECT
			%target.cpp{
				return new AstBreakStatement(GET_LINE(),GET_SCRIPT());
			}
|
	BREAK %error
			%target.cpp{
				addError(GET_LINE(),"expected ';' after 'break'");
				return new AstBreakStatement(GET_LINE(),GET_SCRIPT());
			}
|
	BREAK
			%target.cpp{
				addError(GET_LINE(),"expected ';' after 'break'");
				return new AstBreakStatement(GET_LINE(),GET_SCRIPT());
			}


|
	CONTINUE ';' %prec CORRECT
			%target.cpp{
				return new AstContinueStatement(GET_LINE(),GET_SCRIPT());
			}
|
	CONTINUE %error
			%target.cpp{
				addError(GET_LINE(),"expected ';' after 'continue'");
				return new AstContinueStatement(GET_LINE(),GET_SCRIPT());
			}
|
	CONTINUE
			%target.cpp{
				addError(GET_LINE(),"expected ';' after 'continue'");
				return new AstContinueStatement(GET_LINE(),GET_SCRIPT());
			}
|
	SWITCH '(' exp:exp ')' '{' case_list:case_list '}' %target.cpp {
	       	   	   return new AstSwitchStatement(GET_LINE(),GET_SCRIPT(),exp,case_list);
	}

;


%nonterminal optionalexp %type.cpp "AstExpression*"
:
	%target.cpp {
		    return new AstExpression(GET_LINE(),GET_SCRIPT());
	}
|
	exp:exp %target.cpp {
		return exp;
	}
;


%nonterminal value %type.cpp "AstExpression*"
:
	LITERAL:l %target.cpp { return l; }
|
	STRING:s %target.cpp { return s; } 
|
	IDENTIFIER:i %target.cpp { return i; }
;


%nonterminal case_list %type.cpp "AstCaseStatementList*"
:
	case_list:list CASE value:option CASE_DELIM statement_list:stmt %target.cpp { list->add(option,new AstCaseStatement(GET_LINE(),GET_SCRIPT(),stmt)); return list; }
|
	CASE value:option CASE_DELIM statement_list:stmt %target.cpp { AstCaseStatementList *list = new AstCaseStatementList(GET_LINE(),GET_SCRIPT()); list->add(option,new AstCaseStatement(GET_LINE(),GET_SCRIPT(),stmt)); return list; }
|
	DEFAULT CASE_DELIM statement_list:stmt %target.cpp {AstCaseStatementList * list = new AstCaseStatementList(GET_LINE(),GET_SCRIPT()); list->setDefault(new AstCaseStatement(GET_LINE(),GET_SCRIPT(),stmt)); return list; }
|
	case_list:list DEFAULT CASE_DELIM statement_list:stmt %target.cpp {
										AstCaseStatement* case_stmt = new AstCaseStatement(GET_LINE(),GET_SCRIPT(),stmt);
										if(!list->setDefault(case_stmt)){
												delete case_stmt;
		       	       	   		       		   			     addError(GET_LINE(),"duplicate default statement found");
											     return list;
											     }
											     return list;
								  }
;


%nonterminal exp %type.cpp "AstExpression*"
:
	call:call %target.cpp{ return call; }
|
	value:option %target.cpp { return option; }
|
        IDENTIFIER:ns SCOPE IDENTIFIER:func %target.cpp { return new AstFuncIdentifier(ns->GetLine(),ns->GetScript(),ns->getValue(),func->getValue()); }
|
	exp:a '+' exp:b %prec ADD_SUB %target.cpp{ 
	      AstBinOp* op = new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::ADD,a,b);
	      return op;
	      }
|
	exp:a '-' exp:b %prec ADD_SUB %target.cpp{ 
	      AstBinOp* op = new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::SUB,a,b);
	      return op;
	      }
|
	exp:a BINOP_MULT_DIV_MOD:op exp:b %prec MULT_DIV_MOD %target.cpp { 
	      op->setLeft(a); 
	      op->setRight(b);
	      return op;
	}
|
	exp:a D exp:b %prec POW %target.cpp { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::D,a,b); }
|
	exp:a '=' exp:b %prec ASSIGNMENT %target.cpp {
	      return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::ASSIGN,a,b);
	}
|
	exp:a BINOP_ASSIGNMENT:op exp:b   %prec ASSIGNMENT %target.cpp { 
		   op->setLeft(a);
		   op->setRight(b);
		   return op;
	}
|
	exp:a '^' exp:b  %prec POW %target.cpp { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::POW,a,b); }
|
	exp:a OR exp:b %prec OR %target.cpp { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::OR,a,b); }
|
	exp:a AND exp:b %prec AND %target.cpp { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::AND,a,b); }
|
	exp:a BINOP_COMPARE:op exp:b %prec EQ_NE %target.cpp {
	op->setLeft(a);
	op->setRight(b);
	return op; 
	 }
|
	exp:a BIN_OR exp:b %prec BIN_OR %target.cpp { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::BIN_OR,a,b); }
|
	exp:a BIN_AND exp:b %prec BIN_AND %target.cpp { return new AstBinOp(a->GetLine(),a->GetScript(),AstBinOp::BIN_AND,a,b); } 
|
	BIN_NOT exp:exp %prec UNARY %target.cpp { return new AstUnaryOp(exp->GetLine(),exp->GetScript(),AstUnaryOp::BIN_NOT,exp); }
|
	'(' %error ')' %target.cpp {
	    addError(GET_LINE(),"expected expression between '(' and ')'");
	    return new AstExpression(GET_LINE(),GET_SCRIPT());
	    }

|
	'(' exp:exp ')'  %target.cpp { return exp; }
|
	'-' exp:exp  %prec UNARY %target.cpp { return new AstUnaryOp(exp->GetLine(), exp->GetScript(), AstUnaryOp::MINUS,exp); }
|
	'+' exp:exp  %prec UNARY %target.cpp { return new AstUnaryOp(exp->GetLine(), exp->GetScript(), AstUnaryOp::PLUS,exp); }
|
	NOT %error %prec UNARY %target.cpp {
						addError(GET_LINE(),"expected expression after unary minus.");
						return new AstUnaryOp(GET_LINE(),GET_SCRIPT(),AstUnaryOp::NOT,new AstExpression(GET_LINE(),GET_SCRIPT()));
								  }

|

	NOT exp:exp %prec UNARY %target.cpp { return new AstUnaryOp(exp->GetLine(), exp->GetScript(), AstUnaryOp::NOT,exp); }

|
	exp:lvalue '[' exp:index ']' %prec MEMBER %target.cpp { return new AstArrayElement(lvalue->GetLine(),lvalue->GetScript(),lvalue,index); }
|
	INCREMENT exp:lvalue %prec INC_DEC %target.cpp { return new AstIncrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstIncrement::PRE);}
|
	INCREMENT %error  %prec INC_DEC %target.cpp {
										addError(GET_LINE(),"expected lvalue after '++'");
										return new AstIncrement(GET_LINE(),GET_SCRIPT(),
												new AstExpression(GET_LINE(),GET_SCRIPT()),AstIncrement::PRE);
										}
|
	exp:lvalue INCREMENT %prec INC_DEC %target.cpp { return new AstIncrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstIncrement::POST);}
|
	DECREMENT exp:lvalue %prec UNARY %target.cpp { return new AstDecrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstDecrement::PRE);}
|
	DECREMENT %error  %prec UNARY %target.cpp {
										addError(GET_LINE(),"expected lvalue after '--'");
										return new AstDecrement(GET_LINE(),GET_SCRIPT(),
												new AstExpression(GET_LINE(),GET_SCRIPT()),AstDecrement::PRE);
										}

|
	exp:lvalue DECREMENT %prec UNARY %target.cpp {
									return new AstDecrement(lvalue->GetLine(),lvalue->GetScript(),lvalue, AstDecrement::POST);

									}
|
        REMOVE '(' exp:lvalue ',' exp:exp ')' %prec UNARY %target.cpp { return new AstRemove(lvalue->GetLine(),lvalue->GetScript(),lvalue,exp); }
|
	POP exp:lvalue %prec UNARY %target.cpp { return new AstPop(lvalue->GetLine(),lvalue->GetScript(),lvalue); }
|
	POP %error %prec UNARY %target.cpp {
						addError(GET_LINE(),"expected expression after 'pop'.");
						return new AstPop(GET_LINE(),GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()));
							  }
|
	POPB exp:lvalue %prec UNARY %target.cpp { return new AstPop(lvalue->GetLine(),lvalue->GetScript(),lvalue,true); }
|
	POPB %error %prec UNARY %target.cpp {
						addError(GET_LINE(),"expected expression after 'pop'.");
						return new AstPop(GET_LINE(),GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),true);
							  }
|
	PUSH exp:lvalue ',' exp:rvalue %prec UNARY  %target.cpp { return new AstPush(lvalue->GetLine(),lvalue->GetScript(),lvalue,rvalue,true); }
|
	PUSH %error  %target.cpp {
						addError(GET_LINE(),"expected expression after 'push'.");
						return new AstPush(GET_LINE(),GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),new AstExpression(GET_LINE(),GET_SCRIPT()),true);
							  }
|
	PUSHB exp:lvalue ',' exp:rvalue  %prec UNARY %target.cpp { return new AstPush(lvalue->GetLine(),lvalue->GetScript(),lvalue,rvalue,false); }
|
	PUSHB %error  %target.cpp {
						addError(GET_LINE(),"expected expression after 'pushb'.");
						return new AstPush(GET_LINE(),GET_SCRIPT(),new AstExpression(GET_LINE(),GET_SCRIPT()),NULL);
							  }
|
	FUNCTION '(' param_definition:params ')' '{' statement_list:stmts '}'
	       	   		%target.cpp {
					    return new AstAnonymousFunctionDefinition (GET_LINE(),GET_SCRIPT(), params,stmts);
				}
|
	'[' array_literal:array ']' %target.cpp {
	    return array;
	}
|
	'[' pair_list:list ']' %target.cpp {
		       return list; 
	}
|
	%error %target.cpp {
	       addError(GET_LINE(),"bad expression");
	       return new AstExpression(GET_LINE(),GET_SCRIPT());
	       }
;



%nonterminal call %type.cpp "AstCallExpression*"
:
	exp:exp '(' param_list:params ')' %prec CALL
		        %target.cpp {
				return new AstCallExpression(exp->GetLine(),exp->GetScript(),exp,params);
			}
|
	 exp '(' %error
		    	%target.cpp {
				    addError(GET_LINE(),"Invalid call. Unmatched '('?");
				    return new AstExpression(GET_LINE(),GET_SCRIPT());
			}
;

%nonterminal vardecl %type.cpp "AstDeclaration*"
:
	VAR IDENTIFIER:id %target.cpp { return new AstDeclaration(id->GetLine(),id->GetScript(),id);}
|
	VAR IDENTIFIER:id '=' exp:exp %target.cpp { return new AstDeclaration(id->GetLine(),id->GetScript(),id,exp); }
|
	CONSTANT IDENTIFIER:id '=' exp:exp %target.cpp { return new AstDeclaration(id->GetLine(),id->GetScript(),id,true,exp); }
|
	VAR IDENTIFIER:id '[' exp:i ']' %target.cpp { return new AstArrayDeclaration(id->GetLine(),id->GetScript(),id,i); }
;

%nonterminal param_list %type.cpp "AstParamList*"
:
	exp:exp %target.cpp{ AstParamList * pList = new AstParamList ( exp->GetLine(), exp->GetScript() );
		  pList->add(exp);
		  return pList;
		}
|
	param_list:list ',' exp:exp %target.cpp{ list->add(exp); return list;}
|
	%target.cpp { return new AstParamList(GET_LINE(), GET_SCRIPT()); }
|
	%error 
	       %target.cpp {
	       		   addError(GET_LINE(),"bad parameter");
			   return new AstParamList( GET_LINE(), GET_SCRIPT() );
	       }

;


